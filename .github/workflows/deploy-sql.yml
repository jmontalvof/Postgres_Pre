name: "Postgres_Pre_Pro - SQL Deployment"

on:
  push:
    branches:
      - main
      - development
    paths:
      - 'src/*.sql'
      - 'src/scripts*.txt'

jobs:
  execute-sql:
    runs-on: ubuntu-latest

    steps:
      - name: Clonar el repo
        uses: actions/checkout@v3

      - name: Instalar cliente PostgreSQL
        run: sudo apt-get update && sudo apt-get install -y postgresql-client

      - name: Establecer variables de entorno por rama
        id: variables
        run: |
          if [ "${GITHUB_REF##*/}" = "main" ]; then
            echo "host=${{ secrets.PGHOST_PRO }}" >> $GITHUB_OUTPUT
            echo "user=${{ secrets.PGUSER_PRO }}" >> $GITHUB_OUTPUT
            echo "password=${{ secrets.PGPASSWORD_PRO }}" >> $GITHUB_OUTPUT
            echo "port=${{ secrets.PGPORT_PRO }}" >> $GITHUB_OUTPUT
            echo "database=${{ secrets.PGDATABASE_PRO }}" >> $GITHUB_OUTPUT
            echo "script_file=scripts_pro.txt" >> $GITHUB_OUTPUT
            echo "entorno=PRO" >> $GITHUB_OUTPUT
          else
            echo "host=${{ secrets.PGHOST_DEV }}" >> $GITHUB_OUTPUT
            echo "user=${{ secrets.PGUSER_DEV }}" >> $GITHUB_OUTPUT
            echo "password=${{ secrets.PGPASSWORD_DEV }}" >> $GITHUB_OUTPUT
            echo "port=${{ secrets.PGPORT_DEV }}" >> $GITHUB_OUTPUT
            echo "database=${{ secrets.PGDATABASE_DEV }}" >> $GITHUB_OUTPUT
            echo "script_file=scripts_dev.txt" >> $GITHUB_OUTPUT
            echo "entorno=DEV" >> $GITHUB_OUTPUT
          fi

      - name: Verificar carga de secrets (sin revelar datos)
        env:
          PGHOST: ${{ steps.variables.outputs.host }}
          PGUSER: ${{ steps.variables.outputs.user }}
          PGPASSWORD: ${{ steps.variables.outputs.password }}
          PGPORT: ${{ steps.variables.outputs.port }}
          PGDATABASE: ${{ steps.variables.outputs.database }}
        run: |
          echo "‚úîÔ∏è Secrets cargados para entorno: ${{ steps.variables.outputs.entorno }}"

      - name: Probar conexi√≥n a la base de datos
        env:
          PGHOST: ${{ steps.variables.outputs.host }}
          PGPORT: ${{ steps.variables.outputs.port }}
          PGUSER: ${{ steps.variables.outputs.user }}
          PGPASSWORD: ${{ steps.variables.outputs.password }}
          PGDATABASE: ${{ steps.variables.outputs.database }}
        run: |
          psql -h "$PGHOST" -p "$PGPORT" -U "$PGUSER" -d "$PGDATABASE" -c '\conninfo'

      - name: Ejecutar scripts listados
        env:
          PGHOST: ${{ steps.variables.outputs.host }}
          PGPORT: ${{ steps.variables.outputs.port }}
          PGUSER: ${{ steps.variables.outputs.user }}
          PGPASSWORD: ${{ steps.variables.outputs.password }}
          PGDATABASE: ${{ steps.variables.outputs.database }}
        run: |
          while IFS= read -r script; do
            echo "üöÄ Ejecutando src/$script"
            psql -h "$PGHOST" -p "$PGPORT" -U "$PGUSER" -d "$PGDATABASE" -f "src/$script"
          done < "src/${{ steps.variables.outputs.script_file }}"

      - name: Notificaci√≥n al finalizar
        run: echo "‚úÖ Despliegue completado con √©xito en entorno ${{ steps.variables.outputs.entorno }}"
