name: "Postgres_Pre_Pro - SQL Deployment"

on:
  push:
    branches:
      - main
      - development
    paths:
      - 'src/instruccionesPRE.txt'
      - 'src/*.sql'
      - 'src/scripts*.txt'
      - '.github/workflows/deploy-sql.yml'

jobs:
  deploy:
    runs-on: ubuntu-latest
    container:
      image: jmontalvof/postgres-ia-runner:latest
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
    steps:
      - name: Clonar el repositorio
        uses: actions/checkout@v3

      - name: Verificar existencia del script IA
        run: |
          ls -la fix_sql.py
          chmod +x fix_sql.py

      - name: Configurar Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Establecer variables de entorno por rama
        id: variables
        env:
          PGHOST_PRO: ${{ secrets.PGHOST_PRO }}
          PGUSER_PRO: ${{ secrets.PGUSER_PRO }}
          PGPASSWORD_PRO: ${{ secrets.PGPASSWORD_PRO }}
          PGPORT_PRO: ${{ secrets.PGPORT_PRO }}
          PGDATABASE_PRO: ${{ secrets.PGDATABASE_PRO }}
          PGHOST_DEV: ${{ secrets.PGHOST_DEV }}
          PGUSER_DEV: ${{ secrets.PGUSER_DEV }}
          PGPASSWORD_DEV: ${{ secrets.PGPASSWORD_DEV }}
          PGPORT_DEV: ${{ secrets.PGPORT_DEV }}
          PGDATABASE_DEV: ${{ secrets.PGDATABASE_DEV }}
        run: |
          if [ "${GITHUB_REF##*/}" = "main" ]; then
            echo "host=$PGHOST_PRO" >> $GITHUB_OUTPUT
            echo "user=$PGUSER_PRO" >> $GITHUB_OUTPUT
            echo "password=$PGPASSWORD_PRO" >> $GITHUB_OUTPUT
            echo "port=$PGPORT_PRO" >> $GITHUB_OUTPUT
            echo "database=$PGDATABASE_PRO" >> $GITHUB_OUTPUT
            echo "script_file=scripts_pro.txt" >> $GITHUB_OUTPUT
            echo "entorno=PRO" >> $GITHUB_OUTPUT
          else
            echo "host=$PGHOST_DEV" >> $GITHUB_OUTPUT
            echo "user=$PGUSER_DEV" >> $GITHUB_OUTPUT
            echo "password=$PGPASSWORD_DEV" >> $GITHUB_OUTPUT
            echo "port=$PGPORT_DEV" >> $GITHUB_OUTPUT
            echo "database=$PGDATABASE_DEV" >> $GITHUB_OUTPUT
            echo "script_file=scripts_dev.txt" >> $GITHUB_OUTPUT
            echo "entorno=DEV" >> $GITHUB_OUTPUT
          fi

      - name: Probar conexión a la base de datos
        run: |
          echo "🔗 Conectando a ${{ steps.variables.outputs.database }} en entorno ${{ steps.variables.outputs.entorno }}"
          PGPASSWORD=${{ steps.variables.outputs.password }} psql \
            -h "${{ steps.variables.outputs.host }}" \
            -p "${{ steps.variables.outputs.port }}" \
            -U "${{ steps.variables.outputs.user }}" \
            -d "${{ steps.variables.outputs.database }}" -c '\conninfo'

      - name: Ejecutar scripts listados (con autocorrección IA si falla)
        run: |
          for script in $(cat src/${{ steps.variables.outputs.script_file }}); do
            echo "🚀 Ejecutando src/$script"
            if ! PGPASSWORD=${{ steps.variables.outputs.password }} psql -h "${{ steps.variables.outputs.host }}" \
                -p "${{ steps.variables.outputs.port }}" -U "${{ steps.variables.outputs.user }}" \
                -d "${{ steps.variables.outputs.database }}" -f "src/$script"; then

              echo "⚠️ Error al ejecutar $script. Enviando a IA para corregir..."
              python fix_sql.py --error "Error al ejecutar $script" --file "src/$script"

              echo "🔁 Reintentando con src/${script%.sql}_fix.sql"
              if PGPASSWORD=${{ steps.variables.outputs.password }} psql -h "${{ steps.variables.outputs.host }}" \
                  -p "${{ steps.variables.outputs.port }}" -U "${{ steps.variables.outputs.user }}" \
                  -d "${{ steps.variables.outputs.database }}" -f "src/${script%.sql}_fix.sql"; then
                echo "🎯 ChatGPT corrigió el script y se ejecutó con éxito: ${script%.sql}_fix.sql"
              else
                echo "❌ El script corregido también falló: ${script%.sql}_fix.sql"
                exit 1
              fi
            fi
          done

      - name: Notificación final
        run: echo "✅ Despliegue completado para entorno ${{ steps.variables.outputs.entorno }}"

