name: "Postgres_Pre_Pro - SQL Deployment"

on:
  push:
    branches:
      - main
      - development
    paths:
      - 'src/**/*.sql'
      - 'src/*.txt'
      - '.github/**/*.yml'

jobs:
  execute-sql:
    runs-on: ubuntu-latest

    steps:
      - name: Clonar el repositorio
        uses: actions/checkout@v3

      - name: Verificar existencia del script IA
        run: ls -la fix_sql.py

      - name: Configurar Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Instalar cliente PostgreSQL y dependencias de IA
        run: |
          sudo apt-get update && sudo apt-get install -y postgresql-client
          pip install openai

      - name: Establecer variables de entorno por rama
        id: variables
        run: |
          if [ "${GITHUB_REF##*/}" = "main" ]; then
            echo "host=${{ secrets.PGHOST_PRO }}" >> $GITHUB_OUTPUT
            echo "user=${{ secrets.PGUSER_PRO }}" >> $GITHUB_OUTPUT
            echo "password=${{ secrets.PGPASSWORD_PRO }}" >> $GITHUB_OUTPUT
            echo "port=${{ secrets.PGPORT_PRO }}" >> $GITHUB_OUTPUT
            echo "database=${{ secrets.PGDATABASE_PRO }}" >> $GITHUB_OUTPUT
            echo "script_file=scripts_pro.txt" >> $GITHUB_OUTPUT
            echo "entorno=PRO" >> $GITHUB_OUTPUT
          else
            echo "host=${{ secrets.PGHOST_DEV }}" >> $GITHUB_OUTPUT
            echo "user=${{ secrets.PGUSER_DEV }}" >> $GITHUB_OUTPUT
            echo "password=${{ secrets.PGPASSWORD_DEV }}" >> $GITHUB_OUTPUT
            echo "port=${{ secrets.PGPORT_DEV }}" >> $GITHUB_OUTPUT
            echo "database=${{ secrets.PGDATABASE_DEV }}" >> $GITHUB_OUTPUT
            echo "script_file=scripts_dev.txt" >> $GITHUB_OUTPUT
            echo "entorno=DEV" >> $GITHUB_OUTPUT
          fi

      - name: Ejecutar scripts listados (con autocorrecci√≥n IA si falla)
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          for script in $(cat src/${{ steps.variables.outputs.script_file }}); do
            echo "üöÄ Ejecutando src/$script"
            if ! PGPASSWORD=${{ steps.variables.outputs.password }} psql -h "${{ steps.variables.outputs.host }}" \
                -p "${{ steps.variables.outputs.port }}" -U "${{ steps.variables.outputs.user }}" \
                -d "${{ steps.variables.outputs.database }}" -f "src/$script"; then

              echo "‚ö†Ô∏è Error al ejecutar $script. Enviando a IA para corregir..."
              python fix_sql.py --error "Error al ejecutar $script" --file "src/$script"

              echo "üîÅ Reintentando con src/${script%.sql}_fix.sql"
              if PGPASSWORD=${{ steps.variables.outputs.password }} psql -h "${{ steps.variables.outputs.host }}" \
                  -p "${{ steps.variables.outputs.port }}" -U "${{ steps.variables.outputs.user }}" \
                  -d "${{ steps.variables.outputs.database }}" -f "src/${script%.sql}_fix.sql"; then
                echo "üéØ ChatGPT corrigi√≥ el script y se ejecut√≥ con √©xito: ${script%.sql}_fix.sql"
              else
                echo "‚ùå El script corregido tambi√©n fall√≥: ${script%.sql}_fix.sql"
                exit 1
              fi
            fi
          done

      - name: Finalizaci√≥n
        run: echo "‚úÖ Despliegue finalizado en entorno ${{ steps.variables.outputs.entorno }}"

